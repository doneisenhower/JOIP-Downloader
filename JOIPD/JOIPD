#!/usr/bin/env python3
import json
import os
import re
import sys
from dataclasses import dataclass
from pathlib import Path
from pprint import pprint
from typing import List

import requests
from docopt import docopt
from dotenv import load_dotenv

VERSION = "1.0.0"
CLI = f"""JOIP Archiver

Usage:
  {sys.argv[0]} <link> [-o | --output <filename>] [--verbose] [-n | --no-download]
  {sys.argv[0]} (-h | --help)
  {sys.argv[0]} (-v | --version)

Options:
  -h --help         Show this screen.
  -v --version      Show version.
  -o --output       Specify output filename.
  --verbose         Show verbose output.
  -n --no-download  Don't download any images or assets
"""


def extract_hash(imgur_url: str):
    # TODO: This may need to be more generalized later
    # https://stackoverflow.com/a/7160778
    pattern = re.compile(
        r"^(?:http)s?://imgur.com/a/"  # Base name
        r"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|)",
        re.IGNORECASE,
    )
    if not re.match(pattern, imgur_url):
        raise ValueError("Invalid imgur url")

    return os.path.basename(imgur_url)


class Image:
    def __init__(self, url, descrip):
        self._data = {"url": url, "description": descrip}

    @property
    def url():
        return self._data.get("url")

    @property
    def description():
        return self._data.get("description")

    def __iter__(self):
        for key, val in self._data.items():
            yield (key, val)


class Album:
    def __init__(self, url: str, client_id: str):
        self.base_url = url
        self.hash = extract_hash(url)
        self.api_url = f"https://api.imgur.com/3/album/{self.hash}"
        self.client_id = client_id

        self._images = []
        self._get_imgur_metadata()

    def _get_imgur_metadata(self):
        # TODO: Add auth check and general validation
        resp = requests.get(
            self.api_url, headers={"Authorization": f"Client-ID {self.client_id}"}
        )
        self._data = resp.json()

        try:
            for i in self._data["data"]["images"]:
                descrip = i["description"] or ""
                self.images.append(Image(i["link"], descrip))
        except KeyError:
            raise ValueError("Invalid imgur url")

    def dump(self, filename=None):
        """Dump to json"""
        if not filename:
            filename = self.slug_title + ".json"

        payload = {}
        payload["title"] = self.title
        payload["images"] = []

        for i in self.images:
            payload["images"].append(dict(i))

        with open(filename, "wb") as f:
            f.write(json.dumps(payload, indent=4, ensure_ascii=False).encode("utf-8"))

    def download_content(self, folder_path):
        folder_path = Path(folder_path)
        folder_path.mkdir(exist_ok=True)

    @property
    def title(self):
        return self._data.get("data").get("title") or ""

    @property
    def slug_title(self):
        import unicodedata

        if self.title:
            value = unicodedata.normalize("NFKD", self.title)
            value = str(re.sub("[^\w\s-]", "", value).strip().lower())
            value = str(re.sub("[-\s]+", "_", value))
            return value

        return self.hash

    @property
    def images(self):
        return self._images


if __name__ != "__main__":
    raise RuntimeError

load_dotenv()

CLIENT_ID = os.getenv("CLIENT_ID")
arguments = docopt(CLI, version=VERSION)
a = Album(arguments["<link>"], CLIENT_ID)
a.dump(arguments["<filename>"])

if arguments.get("--verbose"):
    print(f"CLIENT_ID: {CLIENT_ID}")
    pprint(a._data)
